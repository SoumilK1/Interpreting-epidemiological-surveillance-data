[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\SOUMIL~1\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\SOUMIL~1\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 16.0.2)
[debug]       Load.loadUnit: plugins took 91.9539ms
[debug]       Load.loadUnit: defsScala took 0.3277ms
[debug] [Loading] Scanning directory C:\Users\Soumil Kelkar\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Soumil Kelkar\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 17.6205 ms
[debug]           Load.resolveProject(global-plugins) took 45.3608ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Soumil Kelkar\.sbt\1.0\plugins, plugins: List(<none>))) took 84.4439ms
[debug] [Loading] Done in C:\Users\Soumil Kelkar\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 106.3274ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3765ms
[debug]     Load.loadUnit(file:/C:/Users/Soumil%20Kelkar/.sbt/1.0/plugins/, ...) took 209.3676ms
[debug]   Load.apply: load took 403.001ms
[debug]   Load.apply: resolveProjects took 4.9691ms
[debug]   Load.apply: finalTransforms took 76.5705ms
[debug]   Load.apply: config.delegates took 16.9669ms
[debug]   Load.apply: Def.make(settings)... took 663.098ms
[debug]   Load.apply: structureIndex took 151.8223ms
[debug]   Load.apply: mkStreams took 1.9132ms
[info] loading global plugins from C:\Users\Soumil Kelkar\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 10843.1794ms
[debug]           Load.loadUnit: plugins took 35.2892ms
[debug]           Load.loadUnit: defsScala took 0.0026ms
[debug] [Loading] Scanning directory D:\Soumil\Project\COVID-19_epi_project\project
[debug]             Load.loadUnit: mkEval took 10.8529ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\Soumil\Project\COVID-19_epi_project\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.334 ms
[info] loading settings for project covid-19_epi_project-build from idea.sbt ...
[debug]               Load.resolveProject(covid-19_epi_project-build) took 5.8044ms
[debug]             Load.loadTransitive: finalizeProject(Project(id covid-19_epi_project-build, base: D:\Soumil\Project\COVID-19_epi_project\project, plugins: List(<none>))) took 8.8293ms
[debug] [Loading] Done in D:\Soumil\Project\COVID-19_epi_project\project, returning: (covid-19_epi_project-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2901.9244ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.4548ms
[debug]         Load.loadUnit(file:/D:/Soumil/Project/COVID-19_epi_project/project/, ...) took 2944.5057ms
[debug]       Load.apply: load took 2945.8488ms
[debug]       Load.apply: resolveProjects took 0.1109ms
[debug]       Load.apply: finalTransforms took 15.2926ms
[debug]       Load.apply: config.delegates took 0.3924ms
[debug]       Load.apply: Def.make(settings)... took 112.0256ms
[debug]       Load.apply: structureIndex took 32.3416ms
[debug]       Load.apply: mkStreams took 0.0036ms
[info] loading project definition from D:\Soumil\Project\COVID-19_epi_project\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4343.6955ms
[debug]     Load.loadUnit: defsScala took 0.0029ms
[debug] [Loading] Scanning directory D:\Soumil\Project\COVID-19_epi_project
[debug]       Load.loadUnit: mkEval took 12.6521ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\Soumil\Project\COVID-19_epi_project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 12.0052 ms
[info] loading settings for project covid-19_epi_project from build.sbt ...
[debug]         Load.resolveProject(covid-19_epi_project) took 121.2332ms
[debug]       Load.loadTransitive: finalizeProject(Project(id covid-19_epi_project, base: D:\Soumil\Project\COVID-19_epi_project, plugins: List(<none>))) took 137.6915ms
[debug] [Loading] Done in D:\Soumil\Project\COVID-19_epi_project, returning: (covid-19_epi_project)
[debug]     Load.loadUnit: loadedProjectsRaw took 2185.6936ms
[debug]     Load.loadUnit: cleanEvalClasses took 189.5043ms
[debug]   Load.loadUnit(file:/D:/Soumil/Project/COVID-19_epi_project/, ...) took 6719.9407ms
[debug] Load.apply: load took 6721.7606ms
[debug] Load.apply: resolveProjects took 0.2445ms
[debug] Load.apply: finalTransforms took 40.2398ms
[debug] Load.apply: config.delegates took 0.5287ms
[debug] Load.apply: Def.make(settings)... took 109.535ms
[debug] Load.apply: structureIndex took 38.3376ms
[debug] Load.apply: mkStreams took 0.0075ms
[info] set current project to COVID-19_epi_project (in build file:/D:/Soumil/Project/COVID-19_epi_project/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 57680 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 57680, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to COVID-19_epi_project (in build file:/D:/Soumil/Project/COVID-19_epi_project/)
[debug] > Exec(idea-shell, None, None)
